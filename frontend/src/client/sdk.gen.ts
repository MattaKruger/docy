// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-axios';
import type { ReadRootGetData, ReadRootGetResponse, LoadContentEndpointLoadContentGetData, LoadContentEndpointLoadContentGetResponse, GetAgentsApiV1AgentsGetData, GetAgentsApiV1AgentsGetResponse, CreateAgentApiV1AgentsPostData, CreateAgentApiV1AgentsPostError, GetAgentApiV1AgentsAgentIdGetData, GetAgentApiV1AgentsAgentIdGetError, UpdateAgentApiV1AgentsAgentIdPutData, UpdateAgentApiV1AgentsAgentIdPutError, GetActiveAgentsApiV1AgentsActiveGetData, GetArtifactsApiV1ArtifactsGetData, GetArtifactsApiV1ArtifactsGetResponse, CreateArtifactApiV1ArtifactsPostData, CreateArtifactApiV1ArtifactsPostResponse, CreateArtifactApiV1ArtifactsPostError, DeleteArtifactApiV1ArtifactsArtifactIdDeleteData, DeleteArtifactApiV1ArtifactsArtifactIdDeleteError, GetArtifactApiV1ArtifactsArtifactIdGetData, GetArtifactApiV1ArtifactsArtifactIdGetResponse, GetArtifactApiV1ArtifactsArtifactIdGetError, UpdateArtifactApiV1ArtifactsArtifactIdPutData, UpdateArtifactApiV1ArtifactsArtifactIdPutError, ReadChatsApiV1ChatChatsGetData, ReadChatsApiV1ChatChatsGetResponse, ReadChatsApiV1ChatChatsGetError, CreateChatApiV1ChatChatsPostData, CreateChatApiV1ChatChatsPostResponse, CreateChatApiV1ChatChatsPostError, ReadChatApiV1ChatChatsChatIdGetData, ReadChatApiV1ChatChatsChatIdGetResponse, ReadChatApiV1ChatChatsChatIdGetError, ReadMessagesForChatApiV1ChatChatsChatIdMessagesGetData, ReadMessagesForChatApiV1ChatChatsChatIdMessagesGetResponse, ReadMessagesForChatApiV1ChatChatsChatIdMessagesGetError, CreateMessageForChatApiV1ChatChatsChatIdMessagesPostData, CreateMessageForChatApiV1ChatChatsChatIdMessagesPostResponse, CreateMessageForChatApiV1ChatChatsChatIdMessagesPostError, GetAllNotesApiV1NotesGetData, GetAllNotesApiV1NotesGetResponse, GetAllNotesApiV1NotesGetError, CreateNoteApiV1NotesPostData, CreateNoteApiV1NotesPostResponse, CreateNoteApiV1NotesPostError, GetRecentNotesApiV1NotesRecentGetData, GetRecentNotesApiV1NotesRecentGetResponse, GetRecentNotesApiV1NotesRecentGetError, SearchNotesApiV1NotesSearchGetData, SearchNotesApiV1NotesSearchGetResponse, SearchNotesApiV1NotesSearchGetError, GetNoteApiV1NotesNoteIdGetData, GetNoteApiV1NotesNoteIdGetResponse, GetNoteApiV1NotesNoteIdGetError, UpdateNoteApiV1NotesNoteIdPutData, UpdateNoteApiV1NotesNoteIdPutResponse, UpdateNoteApiV1NotesNoteIdPutError, GetNoteLinksApiV1NotesNoteIdLinksGetData, GetNoteLinksApiV1NotesNoteIdLinksGetResponse, GetNoteLinksApiV1NotesNoteIdLinksGetError, GetNoteTagsApiV1NotesNoteIdTagsGetData, GetNoteTagsApiV1NotesNoteIdTagsGetResponse, GetNoteTagsApiV1NotesNoteIdTagsGetError, GetProjectsApiV1ProjectsGetData, GetProjectsApiV1ProjectsGetResponse, CreateProjectApiV1ProjectsPostData, CreateProjectApiV1ProjectsPostError, GetProjectApiV1ProjectsProjectIdGetData, GetProjectApiV1ProjectsProjectIdGetResponse, GetProjectApiV1ProjectsProjectIdGetError, UpdateProjectApiV1ProjectsProjectIdPutData, UpdateProjectApiV1ProjectsProjectIdPutError, GetPromptsApiV1PromptsGetData, GetPromptsApiV1PromptsGetResponse, CreatePromptApiV1PromptsPostData, CreatePromptApiV1PromptsPostError, GetPromptApiV1PromptsPromptIdGetData, GetPromptApiV1PromptsPromptIdGetError, UpdatePromptApiV1PromptsPromptIdPutData, UpdatePromptApiV1PromptsPromptIdPutError, AddMessageToTaskApiV1TasksTaskIdMessagePostData, AddMessageToTaskApiV1TasksTaskIdMessagePostResponse, AddMessageToTaskApiV1TasksTaskIdMessagePostError, GetAllTasksApiV1TasksGetData, GetAllTasksApiV1TasksGetResponse, GetAllTasksApiV1TasksGetError, CreateTaskApiV1TasksPostData, CreateTaskApiV1TasksPostResponse, CreateTaskApiV1TasksPostError, GetUnassignedTasksApiV1TasksUnassignedGetData, GetUnassignedTasksApiV1TasksUnassignedGetResponse, GetUnassignedTasksApiV1TasksUnassignedGetError, DeleteTaskApiV1TasksTaskIdDeleteData, DeleteTaskApiV1TasksTaskIdDeleteResponse, DeleteTaskApiV1TasksTaskIdDeleteError, GetTaskApiV1TasksTaskIdGetData, GetTaskApiV1TasksTaskIdGetResponse, GetTaskApiV1TasksTaskIdGetError, UpdateTaskApiV1TasksTaskIdPatchData, UpdateTaskApiV1TasksTaskIdPatchResponse, UpdateTaskApiV1TasksTaskIdPatchError, AssignTaskToAgentApiV1TasksTaskIdAssignAgentIdPostData, AssignTaskToAgentApiV1TasksTaskIdAssignAgentIdPostResponse, AssignTaskToAgentApiV1TasksTaskIdAssignAgentIdPostError, UnassignAgentFromTaskApiV1TasksTaskIdUnassignPostData, UnassignAgentFromTaskApiV1TasksTaskIdUnassignPostResponse, UnassignAgentFromTaskApiV1TasksTaskIdUnassignPostError, FindSuitableAgentsApiV1TasksTaskIdSuitableAgentsGetData, FindSuitableAgentsApiV1TasksTaskIdSuitableAgentsGetResponse, FindSuitableAgentsApiV1TasksTaskIdSuitableAgentsGetError, AutoAssignTaskEndpointApiV1TasksTaskIdAutoAssignPostData, AutoAssignTaskEndpointApiV1TasksTaskIdAutoAssignPostResponse, AutoAssignTaskEndpointApiV1TasksTaskIdAutoAssignPostError, GetUsersApiV1UsersGetData, GetUsersApiV1UsersGetResponse, CreateUserApiV1UsersPostData, CreateUserApiV1UsersPostResponse, CreateUserApiV1UsersPostError, GetUserApiV1UsersUserIdGetData, GetUserApiV1UsersUserIdGetResponse, GetUserApiV1UsersUserIdGetError, GetUserProjectsApiV1UsersUserIdProjectsGetData, GetUserProjectsApiV1UsersUserIdProjectsGetResponse, GetUserProjectsApiV1UsersUserIdProjectsGetError, GetFilesApiV1FilesGetData, GetFilesApiV1FilesGetResponse, CreateFileApiV1FilesPostData, CreateFileApiV1FilesPostError, DeleteFileApiV1FilesFileNameDeleteData, DeleteFileApiV1FilesFileNameDeleteResponse, DeleteFileApiV1FilesFileNameDeleteError, GetFileApiV1FilesFileNameGetData, GetFileApiV1FilesFileNameGetError, GetFileContentApiV1FilesFileNameContentGetData, GetFileContentApiV1FilesFileNameContentGetResponse, GetFileContentApiV1FilesFileNameContentGetError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Read Root
 */
export const readRootGet = <ThrowOnError extends boolean = false>(options?: Options<ReadRootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadRootGetResponse, unknown, ThrowOnError>({
        responseType: 'text',
        url: '/',
        ...options
    });
};

/**
 * Load Content Endpoint
 */
export const loadContentEndpointLoadContentGet = <ThrowOnError extends boolean = false>(options?: Options<LoadContentEndpointLoadContentGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<LoadContentEndpointLoadContentGetResponse, unknown, ThrowOnError>({
        responseType: 'text',
        url: '/load-content',
        ...options
    });
};

/**
 * Get Agents
 */
export const getAgentsApiV1AgentsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAgentsApiV1AgentsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAgentsApiV1AgentsGetResponse, unknown, ThrowOnError>({
        url: '/api/v1/agents/',
        ...options
    });
};

/**
 * Create Agent
 */
export const createAgentApiV1AgentsPost = <ThrowOnError extends boolean = false>(options: Options<CreateAgentApiV1AgentsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, CreateAgentApiV1AgentsPostError, ThrowOnError>({
        url: '/api/v1/agents/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Agent
 */
export const getAgentApiV1AgentsAgentIdGet = <ThrowOnError extends boolean = false>(options: Options<GetAgentApiV1AgentsAgentIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetAgentApiV1AgentsAgentIdGetError, ThrowOnError>({
        url: '/api/v1/agents/{agent_id}',
        ...options
    });
};

/**
 * Update Agent
 */
export const updateAgentApiV1AgentsAgentIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateAgentApiV1AgentsAgentIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UpdateAgentApiV1AgentsAgentIdPutError, ThrowOnError>({
        url: '/api/v1/agents/{agent_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Active Agents
 */
export const getActiveAgentsApiV1AgentsActiveGet = <ThrowOnError extends boolean = false>(options?: Options<GetActiveAgentsApiV1AgentsActiveGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/v1/agents/active',
        ...options
    });
};

/**
 * Get Artifacts
 */
export const getArtifactsApiV1ArtifactsGet = <ThrowOnError extends boolean = false>(options?: Options<GetArtifactsApiV1ArtifactsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetArtifactsApiV1ArtifactsGetResponse, unknown, ThrowOnError>({
        url: '/api/v1/artifacts/',
        ...options
    });
};

/**
 * Create Artifact
 */
export const createArtifactApiV1ArtifactsPost = <ThrowOnError extends boolean = false>(options: Options<CreateArtifactApiV1ArtifactsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateArtifactApiV1ArtifactsPostResponse, CreateArtifactApiV1ArtifactsPostError, ThrowOnError>({
        url: '/api/v1/artifacts/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Artifact
 */
export const deleteArtifactApiV1ArtifactsArtifactIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteArtifactApiV1ArtifactsArtifactIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, DeleteArtifactApiV1ArtifactsArtifactIdDeleteError, ThrowOnError>({
        url: '/api/v1/artifacts/{artifact_id}',
        ...options
    });
};

/**
 * Get Artifact
 */
export const getArtifactApiV1ArtifactsArtifactIdGet = <ThrowOnError extends boolean = false>(options: Options<GetArtifactApiV1ArtifactsArtifactIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetArtifactApiV1ArtifactsArtifactIdGetResponse, GetArtifactApiV1ArtifactsArtifactIdGetError, ThrowOnError>({
        url: '/api/v1/artifacts/{artifact_id}',
        ...options
    });
};

/**
 * Update Artifact
 */
export const updateArtifactApiV1ArtifactsArtifactIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateArtifactApiV1ArtifactsArtifactIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UpdateArtifactApiV1ArtifactsArtifactIdPutError, ThrowOnError>({
        url: '/api/v1/artifacts/{artifact_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Read Chats
 * Retrieve a list of chats with pagination.
 */
export const readChatsApiV1ChatChatsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadChatsApiV1ChatChatsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadChatsApiV1ChatChatsGetResponse, ReadChatsApiV1ChatChatsGetError, ThrowOnError>({
        url: '/api/v1/chat/chats/',
        ...options
    });
};

/**
 * Create Chat
 * Create a new chat.
 */
export const createChatApiV1ChatChatsPost = <ThrowOnError extends boolean = false>(options: Options<CreateChatApiV1ChatChatsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateChatApiV1ChatChatsPostResponse, CreateChatApiV1ChatChatsPostError, ThrowOnError>({
        url: '/api/v1/chat/chats/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Read Chat
 * Retrieve a specific chat by ID, including its messages.
 */
export const readChatApiV1ChatChatsChatIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadChatApiV1ChatChatsChatIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReadChatApiV1ChatChatsChatIdGetResponse, ReadChatApiV1ChatChatsChatIdGetError, ThrowOnError>({
        url: '/api/v1/chat/chats/{chat_id}',
        ...options
    });
};

/**
 * Read Messages For Chat
 * Retrieve messages for a specific chat with pagination.
 */
export const readMessagesForChatApiV1ChatChatsChatIdMessagesGet = <ThrowOnError extends boolean = false>(options: Options<ReadMessagesForChatApiV1ChatChatsChatIdMessagesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReadMessagesForChatApiV1ChatChatsChatIdMessagesGetResponse, ReadMessagesForChatApiV1ChatChatsChatIdMessagesGetError, ThrowOnError>({
        url: '/api/v1/chat/chats/{chat_id}/messages/',
        ...options
    });
};

/**
 * Create Message For Chat
 * Create a new message within a specific chat.
 */
export const createMessageForChatApiV1ChatChatsChatIdMessagesPost = <ThrowOnError extends boolean = false>(options: Options<CreateMessageForChatApiV1ChatChatsChatIdMessagesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateMessageForChatApiV1ChatChatsChatIdMessagesPostResponse, CreateMessageForChatApiV1ChatChatsChatIdMessagesPostError, ThrowOnError>({
        url: '/api/v1/chat/chats/{chat_id}/messages/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get All Notes
 * Get all notes with pagination
 */
export const getAllNotesApiV1NotesGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllNotesApiV1NotesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllNotesApiV1NotesGetResponse, GetAllNotesApiV1NotesGetError, ThrowOnError>({
        url: '/api/v1/notes/',
        ...options
    });
};

/**
 * Create Note
 * Create a new note
 */
export const createNoteApiV1NotesPost = <ThrowOnError extends boolean = false>(options: Options<CreateNoteApiV1NotesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateNoteApiV1NotesPostResponse, CreateNoteApiV1NotesPostError, ThrowOnError>({
        url: '/api/v1/notes/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Recent Notes
 * Get recent notes
 */
export const getRecentNotesApiV1NotesRecentGet = <ThrowOnError extends boolean = false>(options?: Options<GetRecentNotesApiV1NotesRecentGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRecentNotesApiV1NotesRecentGetResponse, GetRecentNotesApiV1NotesRecentGetError, ThrowOnError>({
        url: '/api/v1/notes/recent',
        ...options
    });
};

/**
 * Search Notes
 * Search notes by content
 */
export const searchNotesApiV1NotesSearchGet = <ThrowOnError extends boolean = false>(options: Options<SearchNotesApiV1NotesSearchGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchNotesApiV1NotesSearchGetResponse, SearchNotesApiV1NotesSearchGetError, ThrowOnError>({
        url: '/api/v1/notes/search',
        ...options
    });
};

/**
 * Get Note
 * Get a specific note by ID
 */
export const getNoteApiV1NotesNoteIdGet = <ThrowOnError extends boolean = false>(options: Options<GetNoteApiV1NotesNoteIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNoteApiV1NotesNoteIdGetResponse, GetNoteApiV1NotesNoteIdGetError, ThrowOnError>({
        url: '/api/v1/notes/{note_id}',
        ...options
    });
};

/**
 * Update Note
 * Update an existing note
 */
export const updateNoteApiV1NotesNoteIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateNoteApiV1NotesNoteIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateNoteApiV1NotesNoteIdPutResponse, UpdateNoteApiV1NotesNoteIdPutError, ThrowOnError>({
        url: '/api/v1/notes/{note_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Note Links
 * Get all links from a specific note
 */
export const getNoteLinksApiV1NotesNoteIdLinksGet = <ThrowOnError extends boolean = false>(options: Options<GetNoteLinksApiV1NotesNoteIdLinksGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNoteLinksApiV1NotesNoteIdLinksGetResponse, GetNoteLinksApiV1NotesNoteIdLinksGetError, ThrowOnError>({
        url: '/api/v1/notes/{note_id}/links',
        ...options
    });
};

/**
 * Get Note Tags
 * Get all tags from a specific note
 */
export const getNoteTagsApiV1NotesNoteIdTagsGet = <ThrowOnError extends boolean = false>(options: Options<GetNoteTagsApiV1NotesNoteIdTagsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNoteTagsApiV1NotesNoteIdTagsGetResponse, GetNoteTagsApiV1NotesNoteIdTagsGetError, ThrowOnError>({
        url: '/api/v1/notes/{note_id}/tags',
        ...options
    });
};

/**
 * Get Projects
 */
export const getProjectsApiV1ProjectsGet = <ThrowOnError extends boolean = false>(options?: Options<GetProjectsApiV1ProjectsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProjectsApiV1ProjectsGetResponse, unknown, ThrowOnError>({
        url: '/api/v1/projects/',
        ...options
    });
};

/**
 * Create Project
 */
export const createProjectApiV1ProjectsPost = <ThrowOnError extends boolean = false>(options: Options<CreateProjectApiV1ProjectsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, CreateProjectApiV1ProjectsPostError, ThrowOnError>({
        url: '/api/v1/projects/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Project
 */
export const getProjectApiV1ProjectsProjectIdGet = <ThrowOnError extends boolean = false>(options: Options<GetProjectApiV1ProjectsProjectIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProjectApiV1ProjectsProjectIdGetResponse, GetProjectApiV1ProjectsProjectIdGetError, ThrowOnError>({
        url: '/api/v1/projects/{project_id}',
        ...options
    });
};

/**
 * Update Project
 */
export const updateProjectApiV1ProjectsProjectIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectApiV1ProjectsProjectIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UpdateProjectApiV1ProjectsProjectIdPutError, ThrowOnError>({
        url: '/api/v1/projects/{project_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Prompts
 */
export const getPromptsApiV1PromptsGet = <ThrowOnError extends boolean = false>(options?: Options<GetPromptsApiV1PromptsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPromptsApiV1PromptsGetResponse, unknown, ThrowOnError>({
        url: '/api/v1/prompts/',
        ...options
    });
};

/**
 * Create Prompt
 */
export const createPromptApiV1PromptsPost = <ThrowOnError extends boolean = false>(options: Options<CreatePromptApiV1PromptsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, CreatePromptApiV1PromptsPostError, ThrowOnError>({
        url: '/api/v1/prompts/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Prompt
 */
export const getPromptApiV1PromptsPromptIdGet = <ThrowOnError extends boolean = false>(options: Options<GetPromptApiV1PromptsPromptIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetPromptApiV1PromptsPromptIdGetError, ThrowOnError>({
        url: '/api/v1/prompts/{prompt_id}',
        ...options
    });
};

/**
 * Update Prompt
 */
export const updatePromptApiV1PromptsPromptIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdatePromptApiV1PromptsPromptIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UpdatePromptApiV1PromptsPromptIdPutError, ThrowOnError>({
        url: '/api/v1/prompts/{prompt_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Add message to Task
 */
export const addMessageToTaskApiV1TasksTaskIdMessagePost = <ThrowOnError extends boolean = false>(options: Options<AddMessageToTaskApiV1TasksTaskIdMessagePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddMessageToTaskApiV1TasksTaskIdMessagePostResponse, AddMessageToTaskApiV1TasksTaskIdMessagePostError, ThrowOnError>({
        url: '/api/v1/tasks/{task_id}/message',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all tasks with optional filters
 * Retrieves a list of all tasks.
 * Can optionally filter by project_id and/or agent_id.
 */
export const getAllTasksApiV1TasksGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllTasksApiV1TasksGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllTasksApiV1TasksGetResponse, GetAllTasksApiV1TasksGetError, ThrowOnError>({
        url: '/api/v1/tasks/',
        ...options
    });
};

/**
 * Create a new task
 * Creates a new task associated with a project.
 */
export const createTaskApiV1TasksPost = <ThrowOnError extends boolean = false>(options: Options<CreateTaskApiV1TasksPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTaskApiV1TasksPostResponse, CreateTaskApiV1TasksPostError, ThrowOnError>({
        url: '/api/v1/tasks/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all unassigned tasks
 * Retrieves a list of tasks that are not currently assigned to any agent.
 * Can optionally filter by project ID.
 */
export const getUnassignedTasksApiV1TasksUnassignedGet = <ThrowOnError extends boolean = false>(options?: Options<GetUnassignedTasksApiV1TasksUnassignedGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUnassignedTasksApiV1TasksUnassignedGetResponse, GetUnassignedTasksApiV1TasksUnassignedGetError, ThrowOnError>({
        url: '/api/v1/tasks/unassigned',
        ...options
    });
};

/**
 * Delete a task
 * Deletes a specific task by its ID.
 */
export const deleteTaskApiV1TasksTaskIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteTaskApiV1TasksTaskIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTaskApiV1TasksTaskIdDeleteResponse, DeleteTaskApiV1TasksTaskIdDeleteError, ThrowOnError>({
        url: '/api/v1/tasks/{task_id}',
        ...options
    });
};

/**
 * Get a specific task by ID
 * Retrieves details of a specific task by its ID.
 */
export const getTaskApiV1TasksTaskIdGet = <ThrowOnError extends boolean = false>(options: Options<GetTaskApiV1TasksTaskIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTaskApiV1TasksTaskIdGetResponse, GetTaskApiV1TasksTaskIdGetError, ThrowOnError>({
        url: '/api/v1/tasks/{task_id}',
        ...options
    });
};

/**
 * Update a task
 * Updates specific fields of an existing task.
 * Note: Agent assignment is handled via dedicated endpoints.
 */
export const updateTaskApiV1TasksTaskIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateTaskApiV1TasksTaskIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateTaskApiV1TasksTaskIdPatchResponse, UpdateTaskApiV1TasksTaskIdPatchError, ThrowOnError>({
        url: '/api/v1/tasks/{task_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Assign a task to an agent
 * Assigns a specific task to a specific active agent.
 */
export const assignTaskToAgentApiV1TasksTaskIdAssignAgentIdPost = <ThrowOnError extends boolean = false>(options: Options<AssignTaskToAgentApiV1TasksTaskIdAssignAgentIdPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AssignTaskToAgentApiV1TasksTaskIdAssignAgentIdPostResponse, AssignTaskToAgentApiV1TasksTaskIdAssignAgentIdPostError, ThrowOnError>({
        url: '/api/v1/tasks/{task_id}/assign/{agent_id}',
        ...options
    });
};

/**
 * Unassign an agent from a task
 * Removes the agent assignment from a task.
 */
export const unassignAgentFromTaskApiV1TasksTaskIdUnassignPost = <ThrowOnError extends boolean = false>(options: Options<UnassignAgentFromTaskApiV1TasksTaskIdUnassignPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UnassignAgentFromTaskApiV1TasksTaskIdUnassignPostResponse, UnassignAgentFromTaskApiV1TasksTaskIdUnassignPostError, ThrowOnError>({
        url: '/api/v1/tasks/{task_id}/unassign',
        ...options
    });
};

/**
 * Find suitable agents for a task
 * Finds active agents whose type matches the requirements of the given task.
 */
export const findSuitableAgentsApiV1TasksTaskIdSuitableAgentsGet = <ThrowOnError extends boolean = false>(options: Options<FindSuitableAgentsApiV1TasksTaskIdSuitableAgentsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindSuitableAgentsApiV1TasksTaskIdSuitableAgentsGetResponse, FindSuitableAgentsApiV1TasksTaskIdSuitableAgentsGetError, ThrowOnError>({
        url: '/api/v1/tasks/{task_id}/suitable-agents',
        ...options
    });
};

/**
 * Automatically assign task to a suitable agent
 * Automatically finds the first available and suitable agent and assigns the task.
 */
export const autoAssignTaskEndpointApiV1TasksTaskIdAutoAssignPost = <ThrowOnError extends boolean = false>(options: Options<AutoAssignTaskEndpointApiV1TasksTaskIdAutoAssignPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AutoAssignTaskEndpointApiV1TasksTaskIdAutoAssignPostResponse, AutoAssignTaskEndpointApiV1TasksTaskIdAutoAssignPostError, ThrowOnError>({
        url: '/api/v1/tasks/{task_id}/auto-assign',
        ...options
    });
};

/**
 * Get Users
 */
export const getUsersApiV1UsersGet = <ThrowOnError extends boolean = false>(options?: Options<GetUsersApiV1UsersGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersApiV1UsersGetResponse, unknown, ThrowOnError>({
        url: '/api/v1/users/',
        ...options
    });
};

/**
 * Create User
 */
export const createUserApiV1UsersPost = <ThrowOnError extends boolean = false>(options: Options<CreateUserApiV1UsersPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserApiV1UsersPostResponse, CreateUserApiV1UsersPostError, ThrowOnError>({
        url: '/api/v1/users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get User
 */
export const getUserApiV1UsersUserIdGet = <ThrowOnError extends boolean = false>(options: Options<GetUserApiV1UsersUserIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserApiV1UsersUserIdGetResponse, GetUserApiV1UsersUserIdGetError, ThrowOnError>({
        url: '/api/v1/users/{user_id}',
        ...options
    });
};

/**
 * Get User Projects
 */
export const getUserProjectsApiV1UsersUserIdProjectsGet = <ThrowOnError extends boolean = false>(options: Options<GetUserProjectsApiV1UsersUserIdProjectsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserProjectsApiV1UsersUserIdProjectsGetResponse, GetUserProjectsApiV1UsersUserIdProjectsGetError, ThrowOnError>({
        url: '/api/v1/users/{user_id}/projects',
        ...options
    });
};

/**
 * Get Files
 */
export const getFilesApiV1FilesGet = <ThrowOnError extends boolean = false>(options?: Options<GetFilesApiV1FilesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFilesApiV1FilesGetResponse, unknown, ThrowOnError>({
        url: '/api/v1/files/',
        ...options
    });
};

/**
 * Create File
 * Create a new file or update an existing file.
 */
export const createFileApiV1FilesPost = <ThrowOnError extends boolean = false>(options: Options<CreateFileApiV1FilesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, CreateFileApiV1FilesPostError, ThrowOnError>({
        url: '/api/v1/files/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete File
 * Delete a file by name.
 */
export const deleteFileApiV1FilesFileNameDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteFileApiV1FilesFileNameDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteFileApiV1FilesFileNameDeleteResponse, DeleteFileApiV1FilesFileNameDeleteError, ThrowOnError>({
        url: '/api/v1/files/{file_name}',
        ...options
    });
};

/**
 * Get File
 * Get a specific file by name.
 * Can return file content as JSON or serve the file directly depending on the query parameter.
 */
export const getFileApiV1FilesFileNameGet = <ThrowOnError extends boolean = false>(options: Options<GetFileApiV1FilesFileNameGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetFileApiV1FilesFileNameGetError, ThrowOnError>({
        url: '/api/v1/files/{file_name}',
        ...options
    });
};

/**
 * Get File Content
 * Get a specific file's content as JSON.
 */
export const getFileContentApiV1FilesFileNameContentGet = <ThrowOnError extends boolean = false>(options: Options<GetFileContentApiV1FilesFileNameContentGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFileContentApiV1FilesFileNameContentGetResponse, GetFileContentApiV1FilesFileNameContentGetError, ThrowOnError>({
        url: '/api/v1/files/{file_name}/content',
        ...options
    });
};