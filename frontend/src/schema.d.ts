/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/chroma/{name}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get Collection */
        post: operations["get_collection_chroma__name___post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chroma/collections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Collections */
        get: operations["get_collections_chroma_collections_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chroma/{name}/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Collection */
        post: operations["create_collection_chroma__name__create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chroma/{name}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Collection */
        put: operations["update_collection_chroma__name__update_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chroma/{name}/docs/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Documents To Collection */
        post: operations["add_documents_to_collection_chroma__name__docs_add_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chroma/{name}/get": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get Collection Documents */
        post: operations["get_collection_documents_chroma__name__get_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chroma/{name}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Collection */
        delete: operations["delete_collection_chroma__name__delete_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Users */
        get: operations["get_users_user__get"];
        put?: never;
        /** Create User */
        post: operations["create_user_user__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Projects */
        get: operations["get_projects_projects__get"];
        put?: never;
        /** Create Project */
        post: operations["create_project_projects__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Project */
        get: operations["get_project_projects__project_id__get"];
        /** Update Project */
        put: operations["update_project_projects__project_id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artifacts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Artifacts */
        get: operations["get_artifacts_artifacts__get"];
        put?: never;
        /** Create Artifact */
        post: operations["create_artifact_artifacts__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artifacts/{artifact_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Artifact */
        get: operations["get_artifact_artifacts__artifact_id__get"];
        /** Update Artifact */
        put: operations["update_artifact_artifacts__artifact_id__put"];
        post?: never;
        /** Delete Artifact */
        delete: operations["delete_artifact_artifacts__artifact_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agent/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Agents */
        get: operations["get_agents_agent__get"];
        put?: never;
        /** Create Agent */
        post: operations["create_agent_agent__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agent/{agent_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Agent */
        get: operations["get_agent_agent__agent_id__get"];
        /** Update Agent */
        put: operations["update_agent_agent__agent_id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/agent/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Active Agents */
        get: operations["get_active_agents_agent_active_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Notes
         * @description Get all notes with pagination
         */
        get: operations["get_all_notes_notes__get"];
        put?: never;
        /**
         * Create Note
         * @description Create a new note
         */
        post: operations["create_note_notes__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes/recent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Recent Notes
         * @description Get recent notes
         */
        get: operations["get_recent_notes_notes_recent_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Notes
         * @description Search notes by content
         */
        get: operations["search_notes_notes_search_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes/{note_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Note
         * @description Get a specific note by ID
         */
        get: operations["get_note_notes__note_id__get"];
        /**
         * Update Note
         * @description Update an existing note
         */
        put: operations["update_note_notes__note_id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes/{note_id}/links": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Note Links
         * @description Get all links from a specific note
         */
        get: operations["get_note_links_notes__note_id__links_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes/{note_id}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Note Tags
         * @description Get all tags from a specific note
         */
        get: operations["get_note_tags_notes__note_id__tags_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get All Tasks */
        get: operations["get_all_tasks_tasks__get"];
        put?: never;
        /** Create */
        post: operations["create_tasks__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Agent */
        Agent: {
            /** Id */
            id?: number | null;
            /**
             * Created At
             * Format: date-time
             * @default 2025-03-25T22:37:36.701148Z
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @default 2025-03-25T22:37:36.701175Z
             */
            updated_at: string;
            /** Name */
            name: string;
            /** @default default */
            agent_type: components["schemas"]["AgentType"];
            /** @default deepseek-r1-distill-qwen-32b */
            agent_model: components["schemas"]["AgentModel"];
            /** @default inactive */
            state: components["schemas"]["AgentState"];
        };
        /** AgentIn */
        AgentIn: {
            /** Name */
            name: string;
            /** System Prompt Id */
            system_prompt_id: number;
            /** @default default */
            agent_type: components["schemas"]["AgentType"];
            /** @default deepseek-r1-distill-qwen-32b */
            agent_model: components["schemas"]["AgentModel"];
            /** @default inactive */
            state: components["schemas"]["AgentState"];
        };
        /**
         * AgentModel
         * @enum {string}
         */
        AgentModel: "deepseek-r1-distill-qwen-32b" | "groq_code" | "groq_brainstorm";
        /** AgentOut */
        AgentOut: {
            /** Id */
            id: number;
            /** Name */
            name: string;
            system_prompt: components["schemas"]["Prompt"];
            agent_type: components["schemas"]["AgentType"];
            agent_model: components["schemas"]["AgentModel"];
            state: components["schemas"]["AgentState"];
        };
        /**
         * AgentState
         * @enum {string}
         */
        AgentState: "active" | "inactive";
        /**
         * AgentType
         * @enum {string}
         */
        AgentType: "default" | "code" | "brainstorm";
        /** AgentUpdate */
        AgentUpdate: {
            /** Name */
            name: string | null;
            /** System Prompt */
            system_prompt: string | null;
            agent_type: components["schemas"]["AgentType"] | null;
            agent_model: components["schemas"]["AgentModel"] | null;
            state: components["schemas"]["AgentState"] | null;
        };
        /** Body_add_documents_to_collection_chroma__name__docs_add_post */
        Body_add_documents_to_collection_chroma__name__docs_add_post: {
            /** Documents */
            documents: string[];
            /** @default {
             *       "category": "default",
             *       "description": "main entry point for fastapi",
             *       "source": "github",
             *       "doc_extension": ".md",
             *       "title": "",
             *       "path_in_repo": "",
             *       "document_type": "",
             *       "section": "",
             *       "api_class": "",
             *       "api_function": "",
             *       "api_module": "",
             *       "has_code_examples": false,
             *       "has_diagrams": false,
             *       "complexity_level": "",
             *       "version_specific": false,
             *       "last_updated": "",
             *       "keywords": "",
             *       "related_docs": ""
             *     } */
            document_metadata: components["schemas"]["DocumentMetadata"];
        };
        /** Body_update_collection_chroma__name__update_put */
        Body_update_collection_chroma__name__update_put: {
            /** Updated Documents */
            updated_documents?: string[] | null;
            /** @default {
             *       "language": "Python",
             *       "library_name": "",
             *       "library_version": "",
             *       "documentation_version": "",
             *       "official_website": "",
             *       "repository_url": "",
             *       "license_type": "",
             *       "embedding_model": "",
             *       "chunk_strategy": ""
             *     } */
            updated_metadata: components["schemas"]["CollectionMetadata"];
        };
        /** CollectionMetadata */
        CollectionMetadata: {
            /**
             * Language
             * @description The programming language used in the documents
             * @default Python
             */
            language: string | null;
            /**
             * Library Name
             * @description Name of the library/framework/package
             * @default
             */
            library_name: string | null;
            /**
             * Library Version
             * @description Version of the library
             * @default
             */
            library_version: string | null;
            /**
             * Documentation Version
             * @description Version of the documentation
             * @default
             */
            documentation_version: string | null;
            /**
             * Official Website
             * @description Official website of the library/package
             * @default
             */
            official_website: string | null;
            /**
             * Repository Url
             * @description URL of the source code repository
             * @default
             */
            repository_url: string | null;
            /**
             * License Type
             * @description License type (MIT, Apache, etc.)
             * @default
             */
            license_type: string | null;
            /**
             * Embedding Model
             * @description Model used to generate embeddings
             * @default
             */
            embedding_model: string | null;
            /**
             * Chunk Strategy
             * @description Strategy used for chunking the documents
             * @default
             */
            chunk_strategy: string | null;
        };
        /** DocumentMetadata */
        DocumentMetadata: {
            /**
             * Category
             * @description Category of document, can be anything.
             * @default default
             */
            category: string;
            /**
             * Description
             * @description The description of the document.
             * @default main entry point for fastapi
             */
            description: string;
            /**
             * Source
             * @description The source of the documents.
             * @default github
             */
            source: string | null;
            /**
             * Doc Extension
             * @description The extension of the documents.
             * @default .md
             */
            doc_extension: string | null;
            /**
             * Title
             * @description Title of the document
             * @default
             */
            title: string | null;
            /**
             * Path In Repo
             * @description Path to the document in repository
             * @default
             */
            path_in_repo: string | null;
            /**
             * Document Type
             * @description Type of document (API reference, tutorial, guide, example, etc.)
             * @default
             */
            document_type: string | null;
            /**
             * Section
             * @description Section within overall documentation (e.g. 'Advanced Usage')
             * @default
             */
            section: string | null;
            /**
             * Api Class
             * @description Class name for class documentation
             * @default
             */
            api_class: string | null;
            /**
             * Api Function
             * @description Function/method name for function documentation
             * @default
             */
            api_function: string | null;
            /**
             * Api Module
             * @description Module name for module documentation
             * @default
             */
            api_module: string | null;
            /**
             * Has Code Examples
             * @description Whether the document contains code examples
             * @default false
             */
            has_code_examples: boolean | null;
            /**
             * Has Diagrams
             * @description Whether the document contains diagrams
             * @default false
             */
            has_diagrams: boolean | null;
            /**
             * Complexity Level
             * @description Difficulty level (beginner, intermediate, advanced)
             * @default
             */
            complexity_level: string | null;
            /**
             * Version Specific
             * @description Whether content is specific to a particular version
             * @default false
             */
            version_specific: boolean | null;
            /**
             * Last Updated
             * @description When the document was last updated
             * @default
             */
            last_updated: string | null;
            /**
             * Keywords
             * @description Key terms for this document
             * @default
             */
            keywords: string | null;
            /**
             * Related Docs
             * @description Related documentation files
             * @default
             */
            related_docs: string | null;
        };
        /** DocumentQuery */
        DocumentQuery: {
            /** Texts */
            texts?: string[];
            /**
             * Language
             * @default
             */
            language: string;
            /**
             * Category
             * @default
             */
            category: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** NoteCreate */
        NoteCreate: {
            /** Title */
            title: string;
            /** Content */
            content?: string | null;
            metadata?: components["schemas"]["NoteMetadata"] | null;
            /** Folder */
            folder?: string | null;
            /** Template */
            template?: string | null;
        };
        /** NoteMetadata */
        NoteMetadata: {
            /**
             * Tags
             * @default []
             */
            tags: string[] | null;
            /** Created */
            created?: string | null;
            /** Modified */
            modified?: string | null;
            /** Status */
            status?: string | null;
        };
        /** NoteResponse */
        NoteResponse: {
            /** Title */
            title: string;
            /** Path */
            path: string;
            /** Content */
            content: string;
            metadata: components["schemas"]["NoteMetadata"];
            /**
             * Created
             * Format: date-time
             */
            created: string;
            /**
             * Modified
             * Format: date-time
             */
            modified: string;
        };
        /** NoteUpdate */
        NoteUpdate: {
            /** Content */
            content?: string | null;
            metadata?: components["schemas"]["NoteMetadata"] | null;
        };
        /** ProjectArtifactIn */
        ProjectArtifactIn: {
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Content */
            content: string;
            /**
             * Validated
             * @default false
             */
            validated: boolean;
            /** @default default */
            project_artifact_type: components["schemas"]["ProjectArtifactType"];
            /** Project Id */
            project_id?: number | null;
        };
        /**
         * ProjectArtifactType
         * @enum {string}
         */
        ProjectArtifactType: "default" | "code" | "markdown";
        /** ProjectArtifactUpdate */
        ProjectArtifactUpdate: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            /** Content */
            content?: string | null;
            /** Validated */
            validated?: boolean | null;
            project_artifact_type?: components["schemas"]["ProjectArtifactType"] | null;
            /** Project Id */
            project_id?: number | null;
        };
        /** ProjectIn */
        ProjectIn: {
            /** Name */
            name: string;
            project_type: components["schemas"]["ProjectType"];
            /** Description */
            description?: string | null;
            /** Framework */
            framework: string;
            /** Owner Id */
            owner_id?: number | null;
        };
        /**
         * ProjectType
         * @enum {string}
         */
        ProjectType: "default" | "code";
        /** ProjectUpdate */
        ProjectUpdate: {
            /** Name */
            name?: string | null;
            type?: components["schemas"]["ProjectType"] | null;
            /** Description */
            description?: string | null;
            /** Owner Id */
            owner_id?: number | null;
        };
        /** Prompt */
        Prompt: {
            /** Id */
            id?: number | null;
            /**
             * Created At
             * Format: date-time
             * @default 2025-03-25T22:37:36.701148Z
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @default 2025-03-25T22:37:36.701175Z
             */
            updated_at: string;
            /** Name */
            name: string;
            /** Agent Id */
            agent_id?: number;
        };
        /** TaskIn */
        TaskIn: {
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Agent Id */
            agent_id?: number | null;
            /** Project Id */
            project_id?: number | null;
        };
        /** TaskOut */
        TaskOut: {
            /** Id */
            id: number;
            /** Name */
            name: string;
            /** Description */
            description: string;
            agent?: components["schemas"]["Agent"] | null;
        };
        /** UserIn */
        UserIn: {
            /** Name */
            name: string;
        };
        /** UserOut */
        UserOut: {
            /** Id */
            id: number;
            /** Name */
            name: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_collection_chroma__name___post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the collection to create or get */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_collections_chroma_collections_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    create_collection_chroma__name__create_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the collection to create or get */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_collection_chroma__name__update_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the collection you want to update */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Body_update_collection_chroma__name__update_put"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_documents_to_collection_chroma__name__docs_add_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the collection to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_add_documents_to_collection_chroma__name__docs_add_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_collection_documents_chroma__name__get_post: {
        parameters: {
            query?: {
                where_document?: string;
                n_results?: number;
            };
            header?: never;
            path: {
                /** @description The name of the collection to retrieve */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DocumentQuery"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_collection_chroma__name__delete_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The name of the collection to delete */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_users_user__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserOut"][];
                };
            };
        };
    };
    create_user_user__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_projects_projects__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    create_project_projects__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_project_projects__project_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_project_projects__project_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_artifacts_artifacts__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    create_artifact_artifacts__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectArtifactIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_artifact_artifacts__artifact_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                artifact_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_artifact_artifacts__artifact_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                artifact_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectArtifactUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_artifact_artifacts__artifact_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                artifact_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_agents_agent__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentOut"][];
                };
            };
        };
    };
    create_agent_agent__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgentIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_agent_agent__agent_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                agent_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_agent_agent__agent_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                agent_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgentUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_active_agents_agent_active_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_all_notes_notes__get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NoteResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_note_notes__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NoteCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NoteResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_recent_notes_notes_recent_get: {
        parameters: {
            query?: {
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NoteResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    search_notes_notes_search_get: {
        parameters: {
            query: {
                query: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NoteResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_note_notes__note_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The note identifier or path */
                note_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NoteResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_note_notes__note_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                note_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NoteUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NoteResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_note_links_notes__note_id__links_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                note_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_note_tags_notes__note_id__tags_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                note_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_all_tasks_tasks__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskOut"][];
                };
            };
        };
    };
    create_tasks__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TaskIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
